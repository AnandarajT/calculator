{"version":3,"sources":["serviceWorker.ts","components/Display/Display.tsx","components/Button/Button.tsx","components/Pad/Pad.tsx","components/App/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","StyledIndicatorList","styled","div","StyledExpression","span","StyleScreen","StyledDisplay","Screen","value","hasMemory","expression","StyledButton","button","color","css","colorToCss","isLarge","Button","children","onClick","StyledPad","Pad","onDigitButtonClick","onPointButtonClick","onOperatorButtonClick","onChangeSignButtonClick","onEqualButtonClick","onAllClearButtonClick","onClearEntryButtonClick","onMemoryRecallButtonClick","onMemoryClearButtonClick","onMemoryPlusButtonClick","onMemoryMinusButtonClick","handleKeyDown","keyCode","shiftKey","useEffect","document","body","addEventListener","removeEventListener","StyledApp","App","useState","memory","setMemory","result","setResult","waitingForOperand","setWaitingForOperand","pendingOperator","setPendingOperator","display","setDisplay","calculate","rightOperand","newResult","toString","slice","Display","digit","newDisplay","length","indexOf","operator","operand","Number","undefined","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.828a1633.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface DisplayProps {\r\n  hasMemory: boolean\r\n  expression: string\r\n  value: string\r\n}\r\n\r\nconst StyledIndicatorList = styled.div`\r\n  font-size: 0.75em;\r\n  line-height: 1;\r\n  opacity: 0.4;\r\n  text-align: right;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-bottom: 0.25em;\r\n  min-height: 1em;\r\n`\r\n\r\nconst StyledExpression = styled.span`\r\n  margin-left: auto;\r\n`\r\n\r\nconst StyleScreen = styled.div`\r\n  font-size: 2.5em;\r\n  min-height: 1.4em;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;  \r\n  overflow: hidden;\r\n`\r\n\r\nconst StyledDisplay = styled.div`\r\n  background-color: #393939;\r\n  color: #fff;\r\n  padding: 1.5em 1em;\r\n`\r\n\r\nexport const Screen: FunctionComponent<DisplayProps> = ({ value, hasMemory, expression }) => {\r\n  return (\r\n    <StyledDisplay>\r\n      <StyledIndicatorList>\r\n        {hasMemory &&\r\n          <span>M</span>\r\n        }\r\n\r\n        <StyledExpression>\r\n          {expression}\r\n        </StyledExpression>\r\n      </StyledIndicatorList>\r\n\r\n      <StyleScreen>\r\n        {value}\r\n      </StyleScreen>\r\n    </StyledDisplay>\r\n  )\r\n}\r\n\r\nexport default Screen\r\n","import React, { FunctionComponent } from 'react'\r\n\r\nimport styled, { css } from 'styled-components'\r\n\r\ninterface ButtonProps {\r\n  color?: 'red' | 'green' | 'dark'\r\n  isLarge?: boolean\r\n  onClick?: () => void\r\n}\r\n\r\nconst colorToCss = (color: ButtonProps['color']) => {\r\n  switch (color) {\r\n    case 'red':\r\n      return css`\r\n        background-color: #c04444;\r\n        color: #fff;\r\n\r\n        &:hover,\r\n        &:focus {\r\n          background-color: #af3b3b;\r\n        }\r\n      `\r\n    case 'green':\r\n      return css`\r\n        background-color: #58a6e4;\r\n        color: #fff;\r\n\r\n        &:hover,\r\n        &:focus {\r\n          background-color: #58a6e4;\r\n        }\r\n      `\r\n    case 'dark':\r\n      return css`\r\n        background-color: #272727;\r\n        color: #58a6e4;\r\n\r\n        &:hover,\r\n        &:focus {\r\n          background-color: #1a1a1a;\r\n        }\r\n      `\r\n  }\r\n\r\n  return css`\r\n    background-color: #2e2e2e;\r\n    color: #fff;\r\n\r\n    &:hover,\r\n    &:focus {\r\n      background-color: #212121;\r\n    }\r\n  `\r\n}\r\n\r\nexport const StyledButton = styled.button<ButtonProps>`\r\n  font-family: inherit;\r\n  font-size: inherit;\r\n  border: 1px solid rgba(0, 0, 0, 0.05);\r\n  border-radius: 0;\r\n  padding-top: 1em;\r\n  padding-bottom: 1em;\r\n  transition: background-color 0.15s ease-in-out, opacity 0.15s ease-in-out;\r\n  ${({ color }) => colorToCss(color)}\r\n  ${({ isLarge }) =>\r\n    isLarge &&\r\n    css`\r\n      grid-column-end: span 2;\r\n    `}\r\n\r\n  position: relative;\r\n  overflow: hidden;\r\n  transform: translate3d(0, 0, 0);\r\n\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n\r\n  :after {\r\n    content: '';\r\n    display: block;\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 0;\r\n    left: 0;\r\n    pointer-events: none;\r\n    background-image: radial-gradient(circle, #fff 10%, transparent 10.01%);\r\n    background-repeat: no-repeat;\r\n    background-position: 50%;\r\n    transform: scale(10, 10);\r\n    opacity: 0;\r\n    transition: transform 0.3s, opacity 1s;\r\n  }\r\n\r\n  :active:after {\r\n    transform: scale(0, 0);\r\n    opacity: 0.2;\r\n    transition: 0s;\r\n  }\r\n`\r\n\r\nexport const Button: FunctionComponent<ButtonProps> = ({ children, color, isLarge, onClick }) => {\r\n  return (\r\n    <StyledButton color={color} isLarge={isLarge} onClick={onClick}>\r\n      {children}\r\n    </StyledButton>\r\n  )\r\n}\r\n\r\nexport default Button\r\n","import React, { FunctionComponent, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport Button from '../Button/Button'\r\nimport { Digit, Operator } from '../../lib/types'\r\n\r\ninterface PadProps {\r\n  onDigitButtonClick: (digit: Digit) => void\r\n  onPointButtonClick: () => void\r\n  onOperatorButtonClick: (operator: Operator) => void\r\n  onChangeSignButtonClick: () => void\r\n  onEqualButtonClick: () => void\r\n  onAllClearButtonClick: () => void\r\n  onClearEntryButtonClick: () => void\r\n  onMemoryRecallButtonClick: () => void\r\n  onMemoryClearButtonClick: () => void\r\n  onMemoryPlusButtonClick: () => void\r\n  onMemoryMinusButtonClick: () => void\r\n}\r\n\r\nconst StyledPad = styled.div`\r\n  display: grid;\r\n  height: 100vh;\r\n  grid-template-columns: repeat(4, 1fr);\r\n  grid-auto-rows: 1fr;\r\n`\r\n\r\nexport const Pad: FunctionComponent<PadProps> = ({\r\n  onDigitButtonClick,\r\n  onPointButtonClick,\r\n  onOperatorButtonClick,\r\n  onChangeSignButtonClick,\r\n  onEqualButtonClick,\r\n  onAllClearButtonClick,\r\n  onClearEntryButtonClick,\r\n  onMemoryRecallButtonClick,\r\n  onMemoryClearButtonClick,\r\n  onMemoryPlusButtonClick,\r\n  onMemoryMinusButtonClick\r\n}) => {\r\n  const handleKeyDown = ({ keyCode, shiftKey }: KeyboardEvent) => {\r\n    if (keyCode >= 48 && keyCode <= 57 && !shiftKey) {\r\n      onDigitButtonClick((keyCode - 48) as Digit)\r\n    } else if ((keyCode >= 96 && keyCode <= 105)) {\r\n      onDigitButtonClick((keyCode - 96) as Digit)\r\n    } else if (keyCode === 107 || (keyCode === 187 && shiftKey)) {\r\n      onOperatorButtonClick('+')\r\n    } else if (keyCode === 109 || keyCode === 189) {\r\n      onOperatorButtonClick('-')\r\n    } else if (keyCode === 106 || (keyCode === 56 && shiftKey)) {\r\n      onOperatorButtonClick('×')\r\n    } else if (keyCode === 111 || keyCode === 191) {\r\n      onOperatorButtonClick('÷')\r\n    } else if (keyCode === 13 || (keyCode === 187 && !shiftKey)) {\r\n      onEqualButtonClick()\r\n    } else if (keyCode === 46) {\r\n      onClearEntryButtonClick()\r\n    } else if (keyCode === 27) {\r\n      onAllClearButtonClick()\r\n    } else if (keyCode === 78) {\r\n      onChangeSignButtonClick()\r\n    } else if (keyCode === 80) {\r\n      onMemoryPlusButtonClick()\r\n    } else if (keyCode === 81) {\r\n      onMemoryMinusButtonClick()\r\n    } else if (keyCode === 82) {\r\n      onMemoryRecallButtonClick()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    document.body.addEventListener('keydown', handleKeyDown)\r\n    return () => document.body.removeEventListener('keydown', handleKeyDown)\r\n  })\r\n\r\n  return (\r\n    <StyledPad>\r\n      <Button onClick={onMemoryRecallButtonClick}>\r\n        MR\r\n      </Button>\r\n      <Button onClick={onMemoryClearButtonClick}>\r\n        MC\r\n      </Button>\r\n      <Button onClick={onMemoryPlusButtonClick}>\r\n        M+\r\n      </Button>\r\n      <Button onClick={onMemoryMinusButtonClick}>\r\n        M-\r\n      </Button>\r\n      <Button color=\"red\" onClick={onAllClearButtonClick}>\r\n        AC\r\n      </Button>\r\n      <Button onClick={onClearEntryButtonClick}>\r\n        C\r\n      </Button>\r\n      <Button onClick={onChangeSignButtonClick}>\r\n        -/+\r\n      </Button>\r\n      <Button color=\"dark\" onClick={() => onOperatorButtonClick('÷')}>\r\n        ÷\r\n      </Button>\r\n      <Button onClick={() => onDigitButtonClick(7)}>\r\n        7\r\n      </Button>\r\n      <Button onClick={() => onDigitButtonClick(8)}>\r\n        8\r\n      </Button>\r\n      <Button onClick={() => onDigitButtonClick(9)}>\r\n        9\r\n      </Button>\r\n      <Button color=\"dark\" onClick={() => onOperatorButtonClick('×')}>\r\n        ×\r\n      </Button>\r\n      <Button onClick={() => onDigitButtonClick(4)}>\r\n        4\r\n      </Button>\r\n      <Button onClick={() => onDigitButtonClick(5)}>\r\n        5\r\n      </Button>\r\n      <Button onClick={() => onDigitButtonClick(6)}>\r\n        6\r\n      </Button>\r\n      <Button color=\"dark\" onClick={() => onOperatorButtonClick('-')}>\r\n        -\r\n      </Button>\r\n      <Button onClick={() => onDigitButtonClick(1)}>\r\n        1\r\n      </Button>\r\n      <Button onClick={() => onDigitButtonClick(2)}>\r\n        2\r\n      </Button>\r\n      <Button onClick={() => onDigitButtonClick(3)}>\r\n        3\r\n      </Button>\r\n      <Button color=\"dark\" onClick={() => onOperatorButtonClick('+')}>\r\n        +\r\n      </Button>\r\n      <Button onClick={() => onDigitButtonClick(0)}>\r\n        0\r\n      </Button>\r\n      <Button onClick={onPointButtonClick}>\r\n        .\r\n      </Button>\r\n      <Button color=\"green\" isLarge={true} onClick={onEqualButtonClick}>\r\n        =\r\n      </Button>\r\n    </StyledPad>\r\n  )\r\n}\r\n\r\nexport default Pad\r\n","import React, { FunctionComponent, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Display from '../Display/Display'\r\nimport Pad from '../Pad/Pad'\r\nimport { Digit, Operator } from '../../lib/types'\r\n\r\nconst StyledApp = styled.div`\r\n  font-family: \"Segoe UI\";\r\n  font-size: 16px;\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\n\r\nexport const App: FunctionComponent = () => {\r\n  // Calculator's states\r\n  const [memory, setMemory] = useState<number>(0)\r\n  const [result, setResult] = useState<number>(0)\r\n  const [waitingForOperand, setWaitingForOperand] = useState<boolean>(true)\r\n  const [pendingOperator, setPendingOperator] = useState<Operator>()\r\n  const [display, setDisplay] = useState<string>('0')\r\n\r\n  const calculate = (rightOperand: number, pendingOperator: Operator): boolean => {\r\n    let newResult = result\r\n\r\n    switch (pendingOperator) {\r\n      case '+':\r\n        newResult += rightOperand\r\n        break\r\n      case '-':\r\n        newResult -= rightOperand\r\n        break\r\n      case '×':\r\n        newResult *= rightOperand\r\n        break\r\n      case '÷':\r\n        if (rightOperand === 0) {\r\n          return false\r\n        }\r\n\r\n        newResult /= rightOperand\r\n    }\r\n\r\n    setResult(newResult)\r\n    setDisplay(newResult.toString().toString().slice(0, 12))\r\n\r\n    return true\r\n  }\r\n\r\n  // Pad buttons handlers\r\n  const onDigitButtonClick = (digit: Digit) => {\r\n    let newDisplay = display\r\n\r\n    if ((display === '0' && digit === 0) || display.length > 12) {\r\n      return\r\n    }\r\n\r\n    if (waitingForOperand) {\r\n      newDisplay = ''\r\n      setWaitingForOperand(false)\r\n    }\r\n\r\n    if (display !== '0') {\r\n      newDisplay = newDisplay + digit.toString()\r\n    } else {\r\n      newDisplay = digit.toString()\r\n    }\r\n\r\n    setDisplay(newDisplay)\r\n  }\r\n\r\n  const onPointButtonClick = () => {\r\n    let newDisplay = display\r\n\r\n    if (waitingForOperand) {\r\n      newDisplay = '0'\r\n    }\r\n\r\n    if (newDisplay.indexOf('.') === -1) {\r\n      newDisplay = newDisplay + '.'\r\n    }\r\n\r\n    setDisplay(newDisplay)\r\n    setWaitingForOperand(false)\r\n  }\r\n\r\n  const onOperatorButtonClick = (operator: Operator) => {\r\n    const operand = Number(display)\r\n\r\n    if (typeof pendingOperator !== 'undefined' && !waitingForOperand) {\r\n      if (!calculate(operand, pendingOperator)) {\r\n        return\r\n      }\r\n    } else {\r\n      setResult(operand)\r\n    }\r\n\r\n    setPendingOperator(operator)\r\n    setWaitingForOperand(true)\r\n  }\r\n\r\n  const onChangeSignButtonClick = () => {\r\n    const value = Number(display)\r\n\r\n    if (value > 0) {\r\n      setDisplay('-' + display)\r\n    } else if (value < 0) {\r\n      setDisplay(display.slice(1))\r\n    }\r\n  }\r\n\r\n  const onEqualButtonClick = () => {\r\n    const operand = Number(display)\r\n\r\n    if (typeof pendingOperator !== 'undefined' && !waitingForOperand) {\r\n      if (!calculate(operand, pendingOperator)) {\r\n        return\r\n      }\r\n\r\n      setPendingOperator(undefined)\r\n    } else {\r\n      setDisplay(operand.toString())\r\n    }\r\n\r\n    setResult(operand)\r\n    setWaitingForOperand(true)\r\n  }\r\n\r\n  const onAllClearButtonClick = () => {\r\n    setMemory(0)\r\n    setResult(0)\r\n    setPendingOperator(undefined)\r\n    setDisplay('0')\r\n    setWaitingForOperand(true)\r\n  }\r\n\r\n  const onClearEntryButtonClick = () => {\r\n    setDisplay('0')\r\n    setWaitingForOperand(true)\r\n  }\r\n\r\n  const onMemoryRecallButtonClick = () => {\r\n    setDisplay(memory.toString())\r\n    setWaitingForOperand(true)\r\n  }\r\n\r\n  const onMemoryClearButtonClick = () => {\r\n    setMemory(0)\r\n    setWaitingForOperand(true)\r\n  }\r\n\r\n  const onMemoryPlusButtonClick = () => {\r\n    setMemory(memory + Number(display))\r\n    setWaitingForOperand(true)\r\n  }\r\n\r\n  const onMemoryMinusButtonClick = () => {\r\n    setMemory(memory - Number(display))\r\n    setWaitingForOperand(true)\r\n  }\r\n\r\n  return (\r\n    <StyledApp>\r\n      <Display value={display} hasMemory={memory !== 0} expression={typeof pendingOperator !== 'undefined' ? `${result}${pendingOperator}${waitingForOperand ? '' : display}` : ''} />\r\n      <Pad\r\n        onDigitButtonClick={onDigitButtonClick}\r\n        onPointButtonClick={onPointButtonClick}\r\n        onOperatorButtonClick={onOperatorButtonClick}\r\n        onChangeSignButtonClick={onChangeSignButtonClick}\r\n        onEqualButtonClick={onEqualButtonClick}\r\n        onAllClearButtonClick={onAllClearButtonClick}\r\n        onClearEntryButtonClick={onClearEntryButtonClick}\r\n        onMemoryRecallButtonClick={onMemoryRecallButtonClick}\r\n        onMemoryClearButtonClick={onMemoryClearButtonClick}\r\n        onMemoryPlusButtonClick={onMemoryPlusButtonClick}\r\n        onMemoryMinusButtonClick={onMemoryMinusButtonClick}\r\n      />\r\n    </StyledApp>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport App from './components/App/App'\r\nimport './index.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}